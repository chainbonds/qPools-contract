use anchor_lang::prelude::*;

//use amm::structs::pool::Pool;

#[account]
pub struct InvariantPoolAccount {

    // Position of pool in the global list of pools
    pub idx: u32,
    pub max_idx: u32,

    // Things we need for SWAP
    pub pool: Pubkey,  // Pre-generated
    pub state: Pubkey,  // Pre-generated
    pub pool_weight: u32,  // Fed-in as argument (by us, with Miller's endpoint)
    pub tickmap: Pubkey,  // Pre-generated

    // Mints
    pub token_currency_mint: Pubkey,  // Pre-generated
    pub token_x_mint: Pubkey,  // Pre-generated

    // Pool-Tokens
    pub pool_token_currency_address: Pubkey,  // Pre-generated
    pub pool_token_x_address: Pubkey,  // Pre-generated

    // Bond/Reserve-Token
    pub qpool_token_currency_address: Pubkey,  // Generated by us in the frontend
    pub qpool_token_x_address: Pubkey,  // Generated by us in the frontend


    // Things we need for CREATE_POSITION
    pub position_in_pool: Pubkey,
    pub position_list_in_pool: Pubkey,
    pub upper_tick: Pubkey,  // Generated by us in the frontend, based on `pool`
    pub lower_tick: Pubkey,  // Generated by us in the frontend, based on `pool`


    // Do we need to add initializer, etc.?
    // I guess it makes sense if we only allow initialize to change this list
    pub initializer: Pubkey,
    pub _bump_pool_list: u8,
}



impl InvariantPoolAccount {
    pub const LEN: usize =
        32 + 32 + // Position, and max-position
            32 + 32 + 32 + 32 + // Things we need for SWAP
            32 + 32 + // Mints
            32 + 32 + // Pool-Tokens
            32 + 32 + // Bond/Reserve-Tokens
            4 * 32 + // Things we need for CREATE_POSITION
            32 + 8 // Stuff that is at the very end
    ;

}